<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CAP Theorem Meets ATMs - Distributed Systems</title><link href="https://priyanshubishnoi.github.io/tech-blog/" rel="alternate"></link><link href="https://priyanshubishnoi.github.io/tech-blog/feeds/distributed-systems.atom.xml" rel="self"></link><id>https://priyanshubishnoi.github.io/tech-blog/</id><updated>2025-09-14T00:00:00+05:30</updated><entry><title>CAP Theorem Meets ATMs</title><link href="https://priyanshubishnoi.github.io/tech-blog/cap-atm.html" rel="alternate"></link><published>2025-09-14T00:00:00+05:30</published><updated>2025-09-14T00:00:00+05:30</updated><author><name>Priyanshu Bishnoi</name></author><id>tag:priyanshubishnoi.github.io,2025-09-14:/tech-blog/cap-atm.html</id><summary type="html">&lt;p&gt;How distributed systems and CAP theorem explain why some ATMs work while others fail.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;let’s stitch your whole thought process into one clean storyline — from CAP theorem all the way down to real-world ATMs.&lt;/h2&gt;
&lt;h2&gt;🧩 1. CAP Theorem Basics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C (Consistency): everyone sees the same data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A (Availability): system always responds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P (Partition tolerance): system survives network splits.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In real distributed systems → P is unavoidable, so tradeoff is C vs A during partitions.&lt;/p&gt;
&lt;h2&gt;🧩 2. Simple Scenario: Double Withdrawals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Balance = 1000, replicated at M1 and M2.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Partition occurs → no sync.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ATM hits M1 → withdraw 500 (balance 500).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ATM hits M2 → withdraw 1000 (balance 0).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Customer walks away with 1500 🥲.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When partition heals → conflict must be resolved.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AP (Availability + Partition tolerance) → both withdrawals succeed → double spend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CP (Consistency + Partition tolerance) → one withdrawal would have been blocked.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;🧩 3. Quorum &amp;amp; Replicas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To prevent both sides from “thinking they’re right,” quorum is used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minimum 3 replicas needed → majority wins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With 2 replicas → both can believe they’re valid (split-brain).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So banks &amp;amp; serious CP systems always run with odd number of replicas and leader election.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;🧩 4. Banks in Real Life&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Banks run multi-DC (multi–data center) replication.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Withdrawals = CP (must talk to global quorum).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Balance inquiries = AP (can serve slightly stale reads).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If one DC is cut off, ATMs connected to it → fail (“Service unavailable”).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other ATMs connected to healthy quorum → succeed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That’s why “ATM across the road works, but this one doesn’t.”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;🧩 5. Cross-Bank Transactions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flow = ATM (HDFC) → HDFC Switch → NPCI → Kotak (issuer).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Issuer (Kotak) = final authority on approval.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Acquirer (HDFC ATM) = just dispenser + logger.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;End of day → NPCI nets out balances → RBI settles between banks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;🧩 6. Edge Cases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ATM low on cash:&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kotak may approve 10k, but HDFC ATM has only 4k.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ATM either:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Does partial dispense + informs Kotak (account debited 4k).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Or cancels txn (no debit).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If mismatch → corrected in reconciliation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ATM crash before reconciliation:&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cash may/may not have been dispensed, but logs not sent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mismatch detected during settlement window.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Auto-reversal (T+1/T+2 days) ensures customer doesn’t lose money.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If not → customer dispute → forced correction.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;✅ Summary in One Line&lt;/h2&gt;
&lt;h5&gt;From CAP theorem to banks: distributed systems must pick CP for money safety → which is why sometimes your ATM fails while another works → issuer always decides, acquirer just dispenses → low cash and crash scenarios get fixed later during reconciliation → but in the moment, you see all the weirdness.&lt;/h5&gt;</content><category term="Distributed Systems"></category><category term="CAPTheorem"></category><category term="ATM"></category><category term="Banking"></category></entry></feed>